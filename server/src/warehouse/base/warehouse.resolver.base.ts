/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateWarehouseArgs } from "./CreateWarehouseArgs";
import { UpdateWarehouseArgs } from "./UpdateWarehouseArgs";
import { DeleteWarehouseArgs } from "./DeleteWarehouseArgs";
import { WarehouseFindManyArgs } from "./WarehouseFindManyArgs";
import { WarehouseFindUniqueArgs } from "./WarehouseFindUniqueArgs";
import { Warehouse } from "./Warehouse";
import { ProductOrderFindManyArgs } from "../../productOrder/base/ProductOrderFindManyArgs";
import { ProductOrder } from "../../productOrder/base/ProductOrder";
import { ProductStockFindManyArgs } from "../../productStock/base/ProductStockFindManyArgs";
import { ProductStock } from "../../productStock/base/ProductStock";
import { SupplyFindManyArgs } from "../../supply/base/SupplyFindManyArgs";
import { Supply } from "../../supply/base/Supply";
import { WarehouseService } from "../warehouse.service";

@graphql.Resolver(() => Warehouse)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class WarehouseResolverBase {
  constructor(
    protected readonly service: WarehouseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "read",
    possession: "any",
  })
  async _warehousesMeta(
    @graphql.Args() args: WarehouseFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Warehouse])
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "read",
    possession: "any",
  })
  async warehouses(
    @graphql.Args() args: WarehouseFindManyArgs
  ): Promise<Warehouse[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Warehouse, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "read",
    possession: "own",
  })
  async warehouse(
    @graphql.Args() args: WarehouseFindUniqueArgs
  ): Promise<Warehouse | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Warehouse)
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "create",
    possession: "any",
  })
  async createWarehouse(
    @graphql.Args() args: CreateWarehouseArgs
  ): Promise<Warehouse> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Warehouse)
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async updateWarehouse(
    @graphql.Args() args: UpdateWarehouseArgs
  ): Promise<Warehouse | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Warehouse)
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "delete",
    possession: "any",
  })
  async deleteWarehouse(
    @graphql.Args() args: DeleteWarehouseArgs
  ): Promise<Warehouse | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ProductOrder])
  @nestAccessControl.UseRoles({
    resource: "ProductOrder",
    action: "read",
    possession: "any",
  })
  async productOrders(
    @graphql.Parent() parent: Warehouse,
    @graphql.Args() args: ProductOrderFindManyArgs
  ): Promise<ProductOrder[]> {
    const results = await this.service.findProductOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ProductStock])
  @nestAccessControl.UseRoles({
    resource: "ProductStock",
    action: "read",
    possession: "any",
  })
  async productStocks(
    @graphql.Parent() parent: Warehouse,
    @graphql.Args() args: ProductStockFindManyArgs
  ): Promise<ProductStock[]> {
    const results = await this.service.findProductStocks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Supply])
  @nestAccessControl.UseRoles({
    resource: "Supply",
    action: "read",
    possession: "any",
  })
  async supplies(
    @graphql.Parent() parent: Warehouse,
    @graphql.Args() args: SupplyFindManyArgs
  ): Promise<Supply[]> {
    const results = await this.service.findSupplies(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
