/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateJobsiteArgs } from "./CreateJobsiteArgs";
import { UpdateJobsiteArgs } from "./UpdateJobsiteArgs";
import { DeleteJobsiteArgs } from "./DeleteJobsiteArgs";
import { JobsiteFindManyArgs } from "./JobsiteFindManyArgs";
import { JobsiteFindUniqueArgs } from "./JobsiteFindUniqueArgs";
import { Jobsite } from "./Jobsite";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { ProductOrderFindManyArgs } from "../../productOrder/base/ProductOrderFindManyArgs";
import { ProductOrder } from "../../productOrder/base/ProductOrder";
import { ProductStockFindManyArgs } from "../../productStock/base/ProductStockFindManyArgs";
import { ProductStock } from "../../productStock/base/ProductStock";
import { JobsiteService } from "../jobsite.service";

@graphql.Resolver(() => Jobsite)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class JobsiteResolverBase {
  constructor(
    protected readonly service: JobsiteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Jobsite",
    action: "read",
    possession: "any",
  })
  async _jobsitesMeta(
    @graphql.Args() args: JobsiteFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Jobsite])
  @nestAccessControl.UseRoles({
    resource: "Jobsite",
    action: "read",
    possession: "any",
  })
  async jobsites(
    @graphql.Args() args: JobsiteFindManyArgs
  ): Promise<Jobsite[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Jobsite, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Jobsite",
    action: "read",
    possession: "own",
  })
  async jobsite(
    @graphql.Args() args: JobsiteFindUniqueArgs
  ): Promise<Jobsite | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Jobsite)
  @nestAccessControl.UseRoles({
    resource: "Jobsite",
    action: "create",
    possession: "any",
  })
  async createJobsite(
    @graphql.Args() args: CreateJobsiteArgs
  ): Promise<Jobsite> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Jobsite)
  @nestAccessControl.UseRoles({
    resource: "Jobsite",
    action: "update",
    possession: "any",
  })
  async updateJobsite(
    @graphql.Args() args: UpdateJobsiteArgs
  ): Promise<Jobsite | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Jobsite)
  @nestAccessControl.UseRoles({
    resource: "Jobsite",
    action: "delete",
    possession: "any",
  })
  async deleteJobsite(
    @graphql.Args() args: DeleteJobsiteArgs
  ): Promise<Jobsite | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Order])
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async orders(
    @graphql.Parent() parent: Jobsite,
    @graphql.Args() args: OrderFindManyArgs
  ): Promise<Order[]> {
    const results = await this.service.findOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ProductOrder])
  @nestAccessControl.UseRoles({
    resource: "ProductOrder",
    action: "read",
    possession: "any",
  })
  async productOrders(
    @graphql.Parent() parent: Jobsite,
    @graphql.Args() args: ProductOrderFindManyArgs
  ): Promise<ProductOrder[]> {
    const results = await this.service.findProductOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ProductStock])
  @nestAccessControl.UseRoles({
    resource: "ProductStock",
    action: "read",
    possession: "any",
  })
  async productStocks(
    @graphql.Parent() parent: Jobsite,
    @graphql.Args() args: ProductStockFindManyArgs
  ): Promise<ProductStock[]> {
    const results = await this.service.findProductStocks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
