/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateManufacturerArgs } from "./CreateManufacturerArgs";
import { UpdateManufacturerArgs } from "./UpdateManufacturerArgs";
import { DeleteManufacturerArgs } from "./DeleteManufacturerArgs";
import { ManufacturerFindManyArgs } from "./ManufacturerFindManyArgs";
import { ManufacturerFindUniqueArgs } from "./ManufacturerFindUniqueArgs";
import { Manufacturer } from "./Manufacturer";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { ManufacturerService } from "../manufacturer.service";

@graphql.Resolver(() => Manufacturer)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ManufacturerResolverBase {
  constructor(
    protected readonly service: ManufacturerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Manufacturer",
    action: "read",
    possession: "any",
  })
  async _manufacturersMeta(
    @graphql.Args() args: ManufacturerFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Manufacturer])
  @nestAccessControl.UseRoles({
    resource: "Manufacturer",
    action: "read",
    possession: "any",
  })
  async manufacturers(
    @graphql.Args() args: ManufacturerFindManyArgs
  ): Promise<Manufacturer[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Manufacturer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Manufacturer",
    action: "read",
    possession: "own",
  })
  async manufacturer(
    @graphql.Args() args: ManufacturerFindUniqueArgs
  ): Promise<Manufacturer | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Manufacturer)
  @nestAccessControl.UseRoles({
    resource: "Manufacturer",
    action: "create",
    possession: "any",
  })
  async createManufacturer(
    @graphql.Args() args: CreateManufacturerArgs
  ): Promise<Manufacturer> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Manufacturer)
  @nestAccessControl.UseRoles({
    resource: "Manufacturer",
    action: "update",
    possession: "any",
  })
  async updateManufacturer(
    @graphql.Args() args: UpdateManufacturerArgs
  ): Promise<Manufacturer | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Manufacturer)
  @nestAccessControl.UseRoles({
    resource: "Manufacturer",
    action: "delete",
    possession: "any",
  })
  async deleteManufacturer(
    @graphql.Args() args: DeleteManufacturerArgs
  ): Promise<Manufacturer | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Product])
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async products(
    @graphql.Parent() parent: Manufacturer,
    @graphql.Args() args: ProductFindManyArgs
  ): Promise<Product[]> {
    const results = await this.service.findProducts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
