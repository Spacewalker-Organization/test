/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSupplyTrackArgs } from "./CreateSupplyTrackArgs";
import { UpdateSupplyTrackArgs } from "./UpdateSupplyTrackArgs";
import { DeleteSupplyTrackArgs } from "./DeleteSupplyTrackArgs";
import { SupplyTrackFindManyArgs } from "./SupplyTrackFindManyArgs";
import { SupplyTrackFindUniqueArgs } from "./SupplyTrackFindUniqueArgs";
import { SupplyTrack } from "./SupplyTrack";
import { ProductSupply } from "../../productSupply/base/ProductSupply";
import { SupplyTrackService } from "../supplyTrack.service";

@graphql.Resolver(() => SupplyTrack)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class SupplyTrackResolverBase {
  constructor(
    protected readonly service: SupplyTrackService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SupplyTrack",
    action: "read",
    possession: "any",
  })
  async _supplyTracksMeta(
    @graphql.Args() args: SupplyTrackFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SupplyTrack])
  @nestAccessControl.UseRoles({
    resource: "SupplyTrack",
    action: "read",
    possession: "any",
  })
  async supplyTracks(
    @graphql.Args() args: SupplyTrackFindManyArgs
  ): Promise<SupplyTrack[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SupplyTrack, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SupplyTrack",
    action: "read",
    possession: "own",
  })
  async supplyTrack(
    @graphql.Args() args: SupplyTrackFindUniqueArgs
  ): Promise<SupplyTrack | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SupplyTrack)
  @nestAccessControl.UseRoles({
    resource: "SupplyTrack",
    action: "create",
    possession: "any",
  })
  async createSupplyTrack(
    @graphql.Args() args: CreateSupplyTrackArgs
  ): Promise<SupplyTrack> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        productsupply: args.data.productsupply
          ? {
              connect: args.data.productsupply,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SupplyTrack)
  @nestAccessControl.UseRoles({
    resource: "SupplyTrack",
    action: "update",
    possession: "any",
  })
  async updateSupplyTrack(
    @graphql.Args() args: UpdateSupplyTrackArgs
  ): Promise<SupplyTrack | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          productsupply: args.data.productsupply
            ? {
                connect: args.data.productsupply,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SupplyTrack)
  @nestAccessControl.UseRoles({
    resource: "SupplyTrack",
    action: "delete",
    possession: "any",
  })
  async deleteSupplyTrack(
    @graphql.Args() args: DeleteSupplyTrackArgs
  ): Promise<SupplyTrack | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ProductSupply, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductSupply",
    action: "read",
    possession: "any",
  })
  async productsupply(
    @graphql.Parent() parent: SupplyTrack
  ): Promise<ProductSupply | null> {
    const result = await this.service.getProductsupply(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
