/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateProductSupplyArgs } from "./CreateProductSupplyArgs";
import { UpdateProductSupplyArgs } from "./UpdateProductSupplyArgs";
import { DeleteProductSupplyArgs } from "./DeleteProductSupplyArgs";
import { ProductSupplyFindManyArgs } from "./ProductSupplyFindManyArgs";
import { ProductSupplyFindUniqueArgs } from "./ProductSupplyFindUniqueArgs";
import { ProductSupply } from "./ProductSupply";
import { SupplyTrackFindManyArgs } from "../../supplyTrack/base/SupplyTrackFindManyArgs";
import { SupplyTrack } from "../../supplyTrack/base/SupplyTrack";
import { Product } from "../../product/base/Product";
import { Supplier } from "../../supplier/base/Supplier";
import { Supply } from "../../supply/base/Supply";
import { ProductSupplyService } from "../productSupply.service";

@graphql.Resolver(() => ProductSupply)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ProductSupplyResolverBase {
  constructor(
    protected readonly service: ProductSupplyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProductSupply",
    action: "read",
    possession: "any",
  })
  async _productSuppliesMeta(
    @graphql.Args() args: ProductSupplyFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProductSupply])
  @nestAccessControl.UseRoles({
    resource: "ProductSupply",
    action: "read",
    possession: "any",
  })
  async productSupplies(
    @graphql.Args() args: ProductSupplyFindManyArgs
  ): Promise<ProductSupply[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProductSupply, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductSupply",
    action: "read",
    possession: "own",
  })
  async productSupply(
    @graphql.Args() args: ProductSupplyFindUniqueArgs
  ): Promise<ProductSupply | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductSupply)
  @nestAccessControl.UseRoles({
    resource: "ProductSupply",
    action: "create",
    possession: "any",
  })
  async createProductSupply(
    @graphql.Args() args: CreateProductSupplyArgs
  ): Promise<ProductSupply> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        product: args.data.product
          ? {
              connect: args.data.product,
            }
          : undefined,

        supplier: args.data.supplier
          ? {
              connect: args.data.supplier,
            }
          : undefined,

        supply: args.data.supply
          ? {
              connect: args.data.supply,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductSupply)
  @nestAccessControl.UseRoles({
    resource: "ProductSupply",
    action: "update",
    possession: "any",
  })
  async updateProductSupply(
    @graphql.Args() args: UpdateProductSupplyArgs
  ): Promise<ProductSupply | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          product: args.data.product
            ? {
                connect: args.data.product,
              }
            : undefined,

          supplier: args.data.supplier
            ? {
                connect: args.data.supplier,
              }
            : undefined,

          supply: args.data.supply
            ? {
                connect: args.data.supply,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductSupply)
  @nestAccessControl.UseRoles({
    resource: "ProductSupply",
    action: "delete",
    possession: "any",
  })
  async deleteProductSupply(
    @graphql.Args() args: DeleteProductSupplyArgs
  ): Promise<ProductSupply | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SupplyTrack])
  @nestAccessControl.UseRoles({
    resource: "SupplyTrack",
    action: "read",
    possession: "any",
  })
  async supplyTracks(
    @graphql.Parent() parent: ProductSupply,
    @graphql.Args() args: SupplyTrackFindManyArgs
  ): Promise<SupplyTrack[]> {
    const results = await this.service.findSupplyTracks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Product, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async product(
    @graphql.Parent() parent: ProductSupply
  ): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Supplier, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Supplier",
    action: "read",
    possession: "any",
  })
  async supplier(
    @graphql.Parent() parent: ProductSupply
  ): Promise<Supplier | null> {
    const result = await this.service.getSupplier(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Supply, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Supply",
    action: "read",
    possession: "any",
  })
  async supply(
    @graphql.Parent() parent: ProductSupply
  ): Promise<Supply | null> {
    const result = await this.service.getSupply(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
