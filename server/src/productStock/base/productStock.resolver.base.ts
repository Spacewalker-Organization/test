/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateProductStockArgs } from "./CreateProductStockArgs";
import { UpdateProductStockArgs } from "./UpdateProductStockArgs";
import { DeleteProductStockArgs } from "./DeleteProductStockArgs";
import { ProductStockFindManyArgs } from "./ProductStockFindManyArgs";
import { ProductStockFindUniqueArgs } from "./ProductStockFindUniqueArgs";
import { ProductStock } from "./ProductStock";
import { Jobsite } from "../../jobsite/base/Jobsite";
import { Product } from "../../product/base/Product";
import { Warehouse } from "../../warehouse/base/Warehouse";
import { ProductStockService } from "../productStock.service";

@graphql.Resolver(() => ProductStock)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ProductStockResolverBase {
  constructor(
    protected readonly service: ProductStockService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProductStock",
    action: "read",
    possession: "any",
  })
  async _productStocksMeta(
    @graphql.Args() args: ProductStockFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProductStock])
  @nestAccessControl.UseRoles({
    resource: "ProductStock",
    action: "read",
    possession: "any",
  })
  async productStocks(
    @graphql.Args() args: ProductStockFindManyArgs
  ): Promise<ProductStock[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProductStock, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductStock",
    action: "read",
    possession: "own",
  })
  async productStock(
    @graphql.Args() args: ProductStockFindUniqueArgs
  ): Promise<ProductStock | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductStock)
  @nestAccessControl.UseRoles({
    resource: "ProductStock",
    action: "create",
    possession: "any",
  })
  async createProductStock(
    @graphql.Args() args: CreateProductStockArgs
  ): Promise<ProductStock> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        jobsite: args.data.jobsite
          ? {
              connect: args.data.jobsite,
            }
          : undefined,

        product: {
          connect: args.data.product,
        },

        warehouse: args.data.warehouse
          ? {
              connect: args.data.warehouse,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductStock)
  @nestAccessControl.UseRoles({
    resource: "ProductStock",
    action: "update",
    possession: "any",
  })
  async updateProductStock(
    @graphql.Args() args: UpdateProductStockArgs
  ): Promise<ProductStock | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          jobsite: args.data.jobsite
            ? {
                connect: args.data.jobsite,
              }
            : undefined,

          product: {
            connect: args.data.product,
          },

          warehouse: args.data.warehouse
            ? {
                connect: args.data.warehouse,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductStock)
  @nestAccessControl.UseRoles({
    resource: "ProductStock",
    action: "delete",
    possession: "any",
  })
  async deleteProductStock(
    @graphql.Args() args: DeleteProductStockArgs
  ): Promise<ProductStock | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Jobsite, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Jobsite",
    action: "read",
    possession: "any",
  })
  async jobsite(
    @graphql.Parent() parent: ProductStock
  ): Promise<Jobsite | null> {
    const result = await this.service.getJobsite(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Product, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async product(
    @graphql.Parent() parent: ProductStock
  ): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Warehouse, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "read",
    possession: "any",
  })
  async warehouse(
    @graphql.Parent() parent: ProductStock
  ): Promise<Warehouse | null> {
    const result = await this.service.getWarehouse(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
