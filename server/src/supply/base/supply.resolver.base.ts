/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSupplyArgs } from "./CreateSupplyArgs";
import { UpdateSupplyArgs } from "./UpdateSupplyArgs";
import { DeleteSupplyArgs } from "./DeleteSupplyArgs";
import { SupplyFindManyArgs } from "./SupplyFindManyArgs";
import { SupplyFindUniqueArgs } from "./SupplyFindUniqueArgs";
import { Supply } from "./Supply";
import { ProductSupplyFindManyArgs } from "../../productSupply/base/ProductSupplyFindManyArgs";
import { ProductSupply } from "../../productSupply/base/ProductSupply";
import { Warehouse } from "../../warehouse/base/Warehouse";
import { SupplyService } from "../supply.service";

@graphql.Resolver(() => Supply)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class SupplyResolverBase {
  constructor(
    protected readonly service: SupplyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Supply",
    action: "read",
    possession: "any",
  })
  async _suppliesMeta(
    @graphql.Args() args: SupplyFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Supply])
  @nestAccessControl.UseRoles({
    resource: "Supply",
    action: "read",
    possession: "any",
  })
  async supplies(@graphql.Args() args: SupplyFindManyArgs): Promise<Supply[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Supply, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Supply",
    action: "read",
    possession: "own",
  })
  async supply(
    @graphql.Args() args: SupplyFindUniqueArgs
  ): Promise<Supply | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Supply)
  @nestAccessControl.UseRoles({
    resource: "Supply",
    action: "create",
    possession: "any",
  })
  async createSupply(@graphql.Args() args: CreateSupplyArgs): Promise<Supply> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        supplyTo: args.data.supplyTo
          ? {
              connect: args.data.supplyTo,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Supply)
  @nestAccessControl.UseRoles({
    resource: "Supply",
    action: "update",
    possession: "any",
  })
  async updateSupply(
    @graphql.Args() args: UpdateSupplyArgs
  ): Promise<Supply | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          supplyTo: args.data.supplyTo
            ? {
                connect: args.data.supplyTo,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Supply)
  @nestAccessControl.UseRoles({
    resource: "Supply",
    action: "delete",
    possession: "any",
  })
  async deleteSupply(
    @graphql.Args() args: DeleteSupplyArgs
  ): Promise<Supply | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ProductSupply])
  @nestAccessControl.UseRoles({
    resource: "ProductSupply",
    action: "read",
    possession: "any",
  })
  async productSupplies(
    @graphql.Parent() parent: Supply,
    @graphql.Args() args: ProductSupplyFindManyArgs
  ): Promise<ProductSupply[]> {
    const results = await this.service.findProductSupplies(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Warehouse, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "read",
    possession: "any",
  })
  async supplyTo(@graphql.Parent() parent: Supply): Promise<Warehouse | null> {
    const result = await this.service.getSupplyTo(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
