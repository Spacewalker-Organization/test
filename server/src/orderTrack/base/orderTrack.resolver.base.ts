/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateOrderTrackArgs } from "./CreateOrderTrackArgs";
import { UpdateOrderTrackArgs } from "./UpdateOrderTrackArgs";
import { DeleteOrderTrackArgs } from "./DeleteOrderTrackArgs";
import { OrderTrackFindManyArgs } from "./OrderTrackFindManyArgs";
import { OrderTrackFindUniqueArgs } from "./OrderTrackFindUniqueArgs";
import { OrderTrack } from "./OrderTrack";
import { ProductOrder } from "../../productOrder/base/ProductOrder";
import { OrderTrackService } from "../orderTrack.service";

@graphql.Resolver(() => OrderTrack)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class OrderTrackResolverBase {
  constructor(
    protected readonly service: OrderTrackService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OrderTrack",
    action: "read",
    possession: "any",
  })
  async _orderTracksMeta(
    @graphql.Args() args: OrderTrackFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OrderTrack])
  @nestAccessControl.UseRoles({
    resource: "OrderTrack",
    action: "read",
    possession: "any",
  })
  async orderTracks(
    @graphql.Args() args: OrderTrackFindManyArgs
  ): Promise<OrderTrack[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OrderTrack, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OrderTrack",
    action: "read",
    possession: "own",
  })
  async orderTrack(
    @graphql.Args() args: OrderTrackFindUniqueArgs
  ): Promise<OrderTrack | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OrderTrack)
  @nestAccessControl.UseRoles({
    resource: "OrderTrack",
    action: "create",
    possession: "any",
  })
  async createOrderTrack(
    @graphql.Args() args: CreateOrderTrackArgs
  ): Promise<OrderTrack> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        productOrder: args.data.productOrder
          ? {
              connect: args.data.productOrder,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OrderTrack)
  @nestAccessControl.UseRoles({
    resource: "OrderTrack",
    action: "update",
    possession: "any",
  })
  async updateOrderTrack(
    @graphql.Args() args: UpdateOrderTrackArgs
  ): Promise<OrderTrack | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          productOrder: args.data.productOrder
            ? {
                connect: args.data.productOrder,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrderTrack)
  @nestAccessControl.UseRoles({
    resource: "OrderTrack",
    action: "delete",
    possession: "any",
  })
  async deleteOrderTrack(
    @graphql.Args() args: DeleteOrderTrackArgs
  ): Promise<OrderTrack | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ProductOrder, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductOrder",
    action: "read",
    possession: "any",
  })
  async productOrder(
    @graphql.Parent() parent: OrderTrack
  ): Promise<ProductOrder | null> {
    const result = await this.service.getProductOrder(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
